package$Item04 <- as.factor(package$Item04)
package$Item05 <- as.factor(package$Item05)
package$Item06 <- as.factor(package$Item06)
package_split <- split(package$Item01,
package$Item02,
package$Item03,
package$Item04,
package$Item05,
package$Item06)
library(dplyr)
library(arules)
library(arulesViz)
library(htmlwidgets)
library(writexl)
options(warn=-1)
dados <- read.csv("dataset_bd3.csv")
dim(dados)
View(dados)
summary(dados)
str(dados)
# Uma forma inteligente de resolver o problema no dataset
# Separamos as linhas pares das linhas ímpares
linhas_pares <- seq(2, nrow(dados), 2)
linhas_impares <- seq(1, nrow(dados), 2)
# Separamos os dados e então usaremos o dataset com as linhas pares (linhas de dados válidos)
df1 <- dados[linhas_pares, ]
View(df1)
df2 <- dados[linhas_impares, ]
View(df2)
# Verifica se temos valores ausentes no primeiro item de compra
sum(is.na(df1$Item01))
# Verifica se temos valores ausentes no segundo item de compra (ATENÇÃO)
sum(is.na(df1$Item02))
View(df1)
# Verifica se temos valores ausentes representados por espaço em branco
which(nchar(trimws(df1$Item01))==0)
which(nchar(trimws(df1$Item02))==0)
# Verifica se temos valores ausentes representados por espaço em branco (usando expressão regular)
grepl("^\\s*$", df1$Item02)
# Número de itens distintos
n_distinct(df1)
# Vamos trabalhar somente com os registros onde o item 2 não fos nulo
df1_two <- df1[!grepl("^\\s*$", df1$Item02), ]
# Número de itens distintos
n_distinct(df1_two)
pacote <- df1_two
pacote$Item01 <- as.factor(pacote$Item01)
pacote$Item02 <- as.factor(pacote$Item02)
pacote$Item03 <- as.factor(pacote$Item03)
pacote$Item04 <- as.factor(pacote$Item04)
pacote$Item05 <- as.factor(pacote$Item05)
pacote$Item06 <- as.factor(pacote$Item06)
pacote_split <- split(pacote$Item01,
pacote$Item02,
pacote$Item03,
pacote$Item04,
pacote$Item05,
pacote$Item06)
package_split <- split(package$Item01,
package$Item02,
package$Item03,
package$Item04,
package$Item05,
package$Item06, drop = FALSE)
transactions <- as(pacote_split, "transactions")
transactions <- as(split_package, "transactions")
transactions1 <- as(split_package, "transactions")
split_package <- split(package$Item01,
package$Item02,
package$Item03,
package$Item04,
package$Item05,
package$Item06,
drop = FALSE)
transactions <- as(split_package, "transactions")
inspect(head(transactions, 5))
rules_product1 <- apriori(transactions,
parameter = list(conf = 0.5, minlen = 3),
appearance = list(rhs = "Dust-Off Compressed Gas 2 pack", default = "lhs"))
# Rules Inspection
inspect(head(sort(rules_product1, by = "confidence"), 5))
rules_product2 <- apriori(transactions,
parameter = list(minlen = 3, conf = 0.5),
appearance = list(rhs = "HP 61 ink",default = "lhs"))
# Rules Inspection
inspect(head(sort(rules_product2, by = "confidence"), 5))
rules_product3 <- apriori(transactions,
parameter = list(minlen = 3, conf = 0.5),
appearance = list(rhs = "VIVO Dual LCD Monitor Desk mount", default = "lhs"))
# Inspeção das regras
inspect(head(sort(rules_product3, by = "confidence"), 5))
summary(rules_product1)
inspect(head(sort(rules_product1, by = "confidence"), 5))
rules_product1
rules_product1 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "Dust-Off Compressed Gas 2 pack", default = "lhs"))
# Filter redundant rules
rules_product1_clean <- rules_product1[!is.redundant(rules_product1)]
# Rules Inspection
inspect(head(sort(rules_product1, by = "confidence"), 5))
rules_product1_clean
rules_product1 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.25, conf = 0.5, target = "rules"),
appearance = list(rhs = "Dust-Off Compressed Gas 2 pack", default = "lhs"))
# Filter redundant rules
rules_product1_clean <- rules_product1[!is.redundant(rules_product1)]
# Rules Inspection
inspect(head(sort(rules_product1, by = "confidence"), 5))
rules_product1_clean
rules_product1 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "Dust-Off Compressed Gas 2 pack", default = "lhs"))
# Filter redundant rules
rules_product1_clean <- rules_product1[!is.redundant(rules_product1)]
# Rules Inspection
inspect(head(sort(rules_product1, by = "confidence"), 5))
rules_product1_clean
summary(rules_product1_clean)
rules_product1 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "HP 61 ink", default = "lhs"))
# Filter redundant rules
rules_product1_clean <- rules_product1[!is.redundant(rules_product1)]
# Rules Inspection
inspect(head(sort(rules_product1, by = "confidence"), 5))
# Sumário
summary(rules_product1_clean)
rules_product1_clean
rules_product1 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "VIVO Dual LCD Monitor Desk mount", default = "lhs"))
# Filter redundant rules
rules_product1_clean <- rules_product1[!is.redundant(rules_product1)]
# Rules Inspection
inspect(head(sort(rules_product1, by = "confidence"), 5))
# Sumary
summary(rules_product1_clean)
rules_product1_clean
rules_product1 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "Dust-Off Compressed Gas 2 pack", default = "lhs"))
# Filter redundant rules
rules_product1_clean <- rules_product1[!is.redundant(rules_product1)]
# Rules Inspection
inspect(head(sort(rules_product1, by = "confidence"), 5))
# Sumary
summary(rules_product1_clean)
rules_product1_clean
# 2 - HP 61 ink
rules_product2 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "HP 61 ink", default = "lhs"))
# Filter redundant rules
rules_product2_clean <- rules_product2[!is.redundant(rules_product1)]
rules_product1 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "Dust-Off Compressed Gas 2 pack", default = "lhs"))
# Filter redundant rules
rules_product1_clean <- rules_product1[!is.redundant(rules_product1)]
# Rules Inspection
inspect(head(sort(rules_product1, by = "confidence"), 5))
# Sumary
summary(rules_product1_clean)
rules_product1_clean
# 2 - HP 61 ink
rules_product2 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "HP 61 ink", default = "lhs"))
# Filter redundant rules
rules_product2_clean <- rules_product2[!is.redundant(rules_product2)]
# Rules Inspection
inspect(head(sort(rules_product2, by = "confidence"), 5))
# Sumary
summary(rules_product2_clean)
rules_product1_clean
# 3 - VIVO Dual LCD Monitor Desk mount
rules_product3 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "VIVO Dual LCD Monitor Desk mount", default = "lhs"))
# Filter redundant rules
rules_product3_clean <- rules_product3[!is.redundant(rules_product3)]
# Rules Inspection
inspect(head(sort(rules_product3, by = "confidence"), 5))
# Sumary
summary(rules_product3_clean)
rules_product1_clean
plot(rules_product1_clean, measure = "support", shading = "confidence", method = "graph", engine = "html")
plot(rules_product2_clean, measure = "support", shading = "confidence", method = "graph", engine = "html")
plot(rules_product3_clean, measure = "support", shading = "confidence", method = "graph", engine = "html")
inspect(head(sort(rules_product1_clean, by = "support", decreasing = TRUE), 1))
inspect(head(sort(rules_product2_clean, by = "confidence", decreasing = TRUE), 1))
inspect(head(sort(rules_product3_clean, by = "confidence", decreasing = TRUE), 1))
# Saving as dataframe and saving it to disk
df_product1 <- as(rules_product1_clean, "data.frame")
View(df_product1)
write_xlsx(df_product1, "df_product1.xlsx")
df_product2 <- as(rules_product2_clean, "data.frame")
View(df_product2)
write_xlsx(df_product2, "df_product2.xlsx")
df_product3 <- as(rules_product3_clean, "data.frame")
View(df_product3)
write_xlsx(df_product1, "df_product3.xlsx")
setwd("C:/DSA/FCD/BigDataRAzure/Cap05")
getwd()
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = N, qmethod = "double")
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = "N", qmethod = "double")
?write.table
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = NA, qmethod = "double")
library(readr)
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read.csv("iris.csv", col.types = matrix(
Sepal.Length = col.double(1),
Sepal.Width = col.double(1),
Petal.Length = col.double(1),
Petal.Width = col.double(1),
Species = col.factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read.csv("iris.csv"
library(readr)
library(readr)
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal_Length = col_double(1),
Sepal_Width = col_double(1),
Petal_Length = col_double(1),
Petal_Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
library(readr)
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
dataset1=rnorm(4000 , 100 , 30)
dataset2=rnorm(4000 , 200 , 30)
par(mfrow=c(1,2))
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
?hist
?plot
hist1 <- hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist2 <- hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
plot(hist1, hist2, add = TRUE)
plot(hist1)
plot(hist2, add = TRUE)
hist1 <- hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist2 <- hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
plot(hist1)
plot(hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" ))
plot(hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main=""), add = TRUE)
plot(hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main=""), add = T)
plot(hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" ))
hist(rnorm(500,4), col=rgb(0,0,1,1/4), xlim=c(0,10))
hist(rnorm(500,6), col=rgb(1,0,0,1/4), xlim=c(0,10), add = TRUE)
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="", add = T)
library(plotly)
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = Species , marker=list(size=20 , opacity=0.5))
x = ~Petal.Length,
head(iris)
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = "Species" , marker=list(size=20 , opacity=0.5))
plot_ly(z = ~volcano) %>%
add_surface() %>%
layout(scene = list(camera=list()))
?plotly
plot_ly(z = ~volcano) %>%
add_surface()
fig <- plot_ly(z = ~volcano)
fig <- fig %>% add_surface()
fig
library("rjson")
resultado <- fromJSON(file = "input.json")
resultado
df <- data.frame(resultado)
df <- data.frame(resultado)
df
df1 <- as.data.frame(resultado)
df1
library("XML")
arqxml <- xmlParse(file = "input.xml")
arqxml <- xmlParse(file = "input.xml")
arqxml
df2 <- as.data.frame(arqxml)
df2 <- xmlToDataFrame(arqxml)
df2
csv1 <- read.csv("input.csv")
nrow(csv1)
ncol(csv1)
View(csv1)
print(csv1$salary order(decreasing = False))
print(csv1$salary (order(decreasing = False)))
print(csv1$salary ,(order(decreasing = False)))
print(csv1$salary ,(order(decreasing = FALSE)))
max(csv1$salary)
max(csv1$salary, header = TRUE)
print(csv1$dept = "IT")
print(csv1$dept == "IT")
if(csv1$dept == "IT" && csv1$salary > 600)
print(csv1$name)
if(csv1$dept == "IT" && csv1$salary > 600)
print(csv1$name)
if(csv1$dept == "IT" & csv1$salary > 600)
print(csv1$name)
library(sqldf)
maiorsalario <- sqldf("select name from csv1 where dept = IT ")
maiorsalario <- sqldf("select name from csv1 where dept = 'IT' and 'salary' > 600 ")
maiorsalario
maiorsalario <- sqldf("select name from csv1 where dept = 'IT' and 'salary' > '600' ")
maiorsalario
maiorsalario <- sqldf("select name from csv1 where dept = 'IT' and 'salary' > 8800 ")
maiorsalario
maiorsalario <- sqldf("select name from csv1 where dept = 'IT' AND 'salary' > 8800 ")
par(mfrow=c(1,2))
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="", add = T)
legend("topright", legend = c("dataset 1", "dataset 2"),col = c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)))
par(mfrow=c(1,2))
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="", add = T)
legend("topright", legend = c("dataset 1", "dataset 2"),col = c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), pt.cex = 2, pch = 15)
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = "Species" , marker=list(size=20 , opacity=0.5))
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = ~Species , marker=list(size=20 , opacity=0.5))
fig <- plot_ly(z = volcano, type = "surface")
fig2 <- plot_ly(z = volcano, type = "surface")
fig2
IT <- sqldf("select name from csv1 where dept = 'IT' AND salary > 600 ")
IT
arqxml <- xmlParse(file = "input.xml")
arqxml
library("methods")
class(csv1)
maiorsalario <- subset(csv1, salary == max(csv1))
maiorsalario <- subset(csv1, salary == max(csv1$salary))
maiorsalario
IT2 <- subset(csv1, dept == "IT")
IT2
IT2 <- subset(csv1, dept == "IT" && salary > 600)
IT2
IT2 <- subset(csv1, dept == "IT" & salary > 600)
IT2
# Data Science with Market Basket Analysis
setwd("C:/Users/Leo/Desktop/Portfolio/MarketBasket-R")
getwd()
# Packages
library(dplyr)
library(arules)
library(arulesViz)
library(htmlwidgets)
library(writexl)
options(warn = -1)
# Load and explore dataset
data <- read.csv("dataset_bd3.csv")
# Data Science with Market Basket Analysis
setwd("C:/Users/Leo/Desktop/Portfolio/MarketBasket-R")
getwd()
# Packages
library(dplyr)
library(arules)
library(arulesViz)
library(htmlwidgets)
library(writexl)
options(warn = -1)
# Load and explore dataset
data <- read.csv("dataset_bd3.csv")
View(data)
# Solving dataset line problem
even_rows <- seq(2, nrow(data), 2)
odd_rows <- seq(1, nrow(data), 2)
# Saparate the data and use the even rows (valid data rows)
df1 <- data[even_rows, ]
View(df1)
# Check if there is missing values in the first and second purchase item
sum(is.na(df1$Item01))
sum(is.na(df1$Item02))
# Check if there is missing values represented by white space
which(nchar(trimws(df1$Item01)) ==0)
which(nchar(trimws(df1$Item02)) ==0)
# Check if there is missing values represented by white space (using regular expression)
grepl("^\\s*$", df1$Item02)
# Number of distinct items
n_distinct(df1)
# Using only records where item 2 isn't null
df1_two <- df1[!grepl("^\\s*$", df1$Item02),]
# Number of distinct items
n_distinct(df1_two)
# Prepare the package by converting variables to factor type
# (variables that we will use from now on to reduce null values)
package <- df1_two
package$Item01 <- as.factor(package$Item01)
package$Item02 <- as.factor(package$Item02)
package$Item03 <- as.factor(package$Item03)
package$Item04 <- as.factor(package$Item04)
package$Item05 <- as.factor(package$Item05)
package$Item06 <- as.factor(package$Item06)
summary(package)
str(package)
split_package <- split(package$Item01,
package$Item02,
package$Item03,
package$Item04,
package$Item05,
package$Item06,
drop = FALSE)
View(split_package)
# Transactions
transactions <- as(split_package, "transactions")
# Rules inspection
inspect(head(transactions, 5))
# Checking the rules of some products:
# 1 - Dust-Off Compressed Gas 2 pack
rules_product1 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "Dust-Off Compressed Gas 2 pack", default = "lhs"))
# Filter redundant rules
rules_product1_clean <- rules_product1[!is.redundant(rules_product1)]
# Rules Inspection
inspect(head(sort(rules_product1, by = "confidence"), 5))
# Sumary
summary(rules_product1_clean)
rules_product1_clean
# 2 - HP 61 ink
rules_product2 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "HP 61 ink", default = "lhs"))
# Filter redundant rules
rules_product2_clean <- rules_product2[!is.redundant(rules_product2)]
# Rules Inspection
inspect(head(sort(rules_product2, by = "confidence"), 5))
# Sumary
summary(rules_product2_clean)
rules_product1_clean
# 3 - VIVO Dual LCD Monitor Desk mount
rules_product3 <- apriori(transactions,
parameter = list(minlen = 3, sup = 0.2, conf = 0.5, target = "rules"),
appearance = list(rhs = "VIVO Dual LCD Monitor Desk mount", default = "lhs"))
# Filter redundant rules
rules_product3_clean <- rules_product3[!is.redundant(rules_product3)]
# Rules Inspection
inspect(head(sort(rules_product3, by = "confidence"), 5))
# Sumary
summary(rules_product3_clean)
rules_product1_clean
# Plot all 3 rules
plot(rules_product1_clean, measure = "support", shading = "confidence", method = "graph", engine = "html")
plot(rules_product2_clean, measure = "support", shading = "confidence", method = "graph", engine = "html")
plot(rules_product3_clean, measure = "support", shading = "confidence", method = "graph", engine = "html")
# Top 3 rules using "support" for Rule 1 and "confidence" for Rule 2 and 3
inspect(head(sort(rules_product1_clean, by = "support", decreasing = TRUE), 1))
inspect(head(sort(rules_product2_clean, by = "confidence", decreasing = TRUE), 1))
inspect(head(sort(rules_product3_clean, by = "confidence", decreasing = TRUE), 1))
# Saving as dataframe and saving it to disk
df_product1 <- as(rules_product1_clean, "data.frame")
View(df_product1)
write_xlsx(df_product1, "df_product1.xlsx")
df_product2 <- as(rules_product2_clean, "data.frame")
View(df_product2)
write_xlsx(df_product2, "df_product2.xlsx")
df_product3 <- as(rules_product3_clean, "data.frame")
View(df_product3)
write_xlsx(df_product1, "df_product3.xlsx")
